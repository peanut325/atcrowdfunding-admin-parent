<!DOCTYPE web-app PUBLIC
        "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
        "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!--  将spring的IOC容器和SringMVC的IOC容器合二为一  -->
    <!--配置监听加载文件-->
<!--    <context-param>-->
<!--        <param-name>contextConfigLocation</param-name>-->
<!--        <param-value>classpath:spring-persist-*.xml</param-value>-->
<!--    </context-param>-->
<!--    &lt;!&ndash;ContextLoaderListener加入容器&ndash;&gt;-->
<!--    <listener>-->
<!--        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>-->
<!--    </listener>-->

    <!-- 配置字符集过滤器,解决乱码 -->
    <!--必须作为第一个filter进行配置，才能生效-->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <!--强制请求进行编码-->
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <!--强制响应进行编码-->
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <!--配置过滤器的过滤路径，/*全部路径-->
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--配置前端控制器-->
    <servlet>
        <servlet-name>dispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--SpringMVC的配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-*.xml</param-value>
        </init-param>
        <!--Servlet默认的生命周期中，会在第一次请求时创建对象
            而DispatcherServlet创建对象时，有大量的初始化工作，不适合在第一次请求时创建
            设置load-on-startup使其在web应用启动时进行创建-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <!--配置映射路径-->
    <servlet-mapping>
        <servlet-name>dispatcherServlet</servlet-name>

        <!--  url-pattern配置方式一:/表示所有拦截  -->
        <!--  <url-pattern>/</url-pattern>-->

        <!--  url-pattern配置方式二:配置请求扩展名  -->
        <!--  优点:
                    1.静态资源不通过SpringMVC，不需要特殊处理
                    2.实现伪静态效果
                      (1)给黑客入侵增加难度
                       (2)有利于SEO优化
               缺点：不符合RESTFul风格-->
        <url-pattern>*.html</url-pattern>
        <!--如果一个Ajax请求扩展名时是html，但实际返回json数据，与实际不匹配，会报406错误
            为了让Ajax顺利拿到json数据，配置json扩展名-->
        <url-pattern>*.json</url-pattern>
    </servlet-mapping>

    <!--加入 SpringSecurity 控制权限的 Filter-->
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

</web-app>
